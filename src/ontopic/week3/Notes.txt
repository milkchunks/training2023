IMPORTANT: DO NOT DEFINE A SCOPE FOR ANY CLASSES OR METHODS EXCEPT FOR main(). THIS MAKES IT MOSTLY PACKAGE PRIVATE
UNLESS A CLASS FROM A DIFFERENT METHOD EXTENDS IT

Static vs. Non-Static Methods:
    Static methods are associated with a class itself. Non-static method are associated with an instance of the class
    static call: getName(). non-static call: robot.getName() (like scanner.next())

    static doesn't require you to make an instance (Robot.drive() is static, r.drive() is non-static)

Constructors:
    A 'method' that defines the inputs of your constructor when you define an instance of the class
    NOTE: name and teamNumber are defined non-statically (like String name = "Bobert" outside of any methods)
    Ex. A class constructor like public Robot(int teamNumber, String name) {this.teamNumber = teamNumber; this.name = name;}
    The definition of an instance would look like: Robot r = new Robot (2046, "Polarity");

    This would be used when instances of an object need to be used. If your robot has two arms with the same mechanics
    but different measurements, you could create a class that operates the arm like any other arm, with the measurements
    as the input (helps with scalability)

    assigning the parameter to the global variable is very important for some reason but idk why


Whatever is in the constructor in the class file will run on declaration

Polymorphism:
    You can instantiate a subclass as a parent class

Inheritance:
    Child classes inherit fields and methods from parent class. @Override overrides the inherited method
    The 'super' keyword denotes the field as the inherited field (e.g. if age belongs to Animal and color belongs to Cat,
    you'd use super.age to set age, and this.color to set color)

Interface:
    Defines abstract method and non-abstract fields. These are by default public, static, and final. When implementing an
    interface with abstract methods, you MUST define the method in the class with a constructor of the interface

    BUT if you define the method with the default keyword, you aren't required to define the method when implementing
    (e.g. default String getName() {return "Unnamed"} isn't required to be defined, and any calls will return "Unnamed")

@Override:
    Overrides the parent class's inherited method. (e.g. Animal.die() has different code than Dog.die() because @Override
    overrode Animal's die() method with different code under the same name)